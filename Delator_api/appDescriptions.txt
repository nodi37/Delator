//Privlege lvls

0 - highest - admin only
1 - Company Owner
2 - Employee

//Pricing plans
0 - free
1++ - next++

//settlementMethod
0 - Daily overtime
1 - Weelky overtime

//Overtimes 
0 - 0%
0.12 - 12%
1 - 100%

//Creating filters:

For keyword searching:
    1. Add entry "keyword" in yup validator.
    2. Define filters definitions in Model
    3. Add fields names to arrays. If you want to pass a keyword to field which has number type use 'keywordNumberType' otherwise use 'keywordStringType'.
        Accepts nested paths too 
        example:

        Model.filtersDef = {
            keywordStringType: [
                'fieldName'
            ],
            keywordNumberType: [
                'fieldName'
                'fieldName.nestedFieldName'
            ]
        }

    This is for example if You want to search for keyword in for example name and phone number which has String and Number types. 
    Incoming value will be converted to number if its possible and then passed to mongoose find func. 
    Its required because mongoDB not let to search in fields with number type using strings, value needs to be converted.


For other values: 
    1. Add entry in Yup Validator to let value pass in and it will be done automatically if its simple value, like number or string. If you want to look for phrase or regexp use keyword query.
    2. If You need to use nested path you can add it to Model.filtersDef like so:

    Model.filtersDef = {
        >employeeOf: 'employeeOf.companyId',<
        keywordStringType: [
            'smth'
        ],
        keywordNumberType: [
            'smth'
        ]
    }

    Now if You pass employeeOf as queryParameter, mongoose will look for it in employeeOf.companyId



//ToDo